spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/full-stack-ecommerce?useSSL=false&useUnicode=yes&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&serverTimezone=UTC
spring.datasource.username=ecommerceapp
spring.datasource.password=ecommerceapp

spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

spring.data.rest.base-path=/api

allowed.origins=https://localhost:4200

# - Tells spring we only want to expose repositories data that are explicitly annotated @RepositoryRestResource
spring.data.rest.detection-strategy=ANNOTATED

# - Security setup to verify requests sent here by our Angular front-end application
okta.oauth2.client-id=0oa25f4oyfmrs7GVn5d7
okta.oauth2.client-secret=thBlI1daUlt4EMG9wMPLaO-hfStvJpRDwKbEZrAi
okta.oauth2.issuer=https://dev-22845289.okta.com/oauth2/default


#####
#
# HTTPS configuration - created with keytool command
# This is done so that our Spring Boot app can run on https, same as our front end
#
#####

# Server web port - what we listen to for https, so to visit our products api we need localhost:8443/api/products
server.port=8443

# Enable HTTPS support (only accept HTTPS requests)
server.ssl.enabled=true

# Alias that identifies the key in the key store
server.ssl.key-alias=luv2code

# Keystore location...anything in src/main/resources is already on classpath
server.ssl.key-store=classpath:luv2code-keystore.p12

# Keystore password - same as one used in keytool command ran to create keystore file
server.ssl.key-store-password=secret

# Keystore format
server.ssl.key-store-type=PKCS12