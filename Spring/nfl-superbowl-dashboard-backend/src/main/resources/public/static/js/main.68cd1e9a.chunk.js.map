{"version":3,"sources":["components/GameDetailsCard.js","components/YearSelector.js","pages/GamePage.js","components/GameSmallCard.js","pages/TeamPage.js","components/TeamsTile.js","pages/HomePage.js","App.js","reportWebVitals.js","index.js"],"names":["GameDetailsCard","teamName","game","otherTeam","winner","loser","otherTeamRoute","isTeamWon","className","to","sbDate","stadium","winnerPts","mvp","city","state","YearSelector","team","years","gamesPlayed","map","date","split","year","Math","random","GamePage","useState","setGame","setTeam","useParams","useEffect","getGameForYear","a","fetch","process","response","response2","json","data","data2","GameSmallCard","TeamPage","fetchMatches","title","value","totalAppearances","totalWins","color","slice","id","TeamsTile","HomePage","teams","setTeams","getAllTeams","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68cd1e9a.chunk.js","sourcesContent":["import { React } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './GameDetailsCard.scss';\r\n\r\n\r\nexport const GameDetailsCard = ({teamName, game}) => {\r\n    \r\n     if (!game) return null;\r\n        const otherTeam = game.winner === teamName ? game.loser : game.winner;\r\n        const otherTeamRoute = `/teams/${otherTeam}`;\r\n        const isTeamWon = teamName === game.winner;\r\n        return(\r\n            <div className={isTeamWon ? 'GameDetailsCard won-card' : 'GameDetailsCard lost-card'}>\r\n                <div className=\"main-game-details\">\r\n                    <h3>Latest Appearances</h3>\r\n                    <span className=\"vs\">vs</span>\r\n                    <h1><Link to={otherTeamRoute}> {otherTeam}</Link></h1>\r\n                    <h2 className=\"game-date\">{game.sbDate}</h2>\r\n                    <h3 className=\"game-stadium\">at {game.stadium}</h3>\r\n                    <h3 className=\"game-result\">{game.winner} won with a score of {game.winnerPts}</h3>\r\n                </div>\r\n                <div className=\"additional-details\">\r\n                    <h3>MVP</h3>\r\n                    <p>{game.mvp}</p>\r\n                    <h3>City, State</h3>\r\n                    <p>{game.city}, {game.state}</p>\r\n                </div>\r\n            </div>\r\n    );\r\n}","import { React } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './YearSelector.scss';\r\n\r\nexport const YearSelector = ({team}) => {\r\n\r\n    let teamName = team.teamName;\r\n    let dates = team.gamesPlayed;\r\n    let years = dates.map(date => date.sbDate.split('-'));\r\n\r\n    return(\r\n        <ol className=\"YearSelector\">\r\n            {\r\n                years.map(year => (\r\n                <li key={Math.random()}>\r\n                    <Link to={`/teams/${teamName}/game/${year[0]}`}>{year[0]}</Link>\r\n                </li>\r\n            ))\r\n            }\r\n        </ol>\r\n    )\r\n}","import { React, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { GameDetailsCard } from '../components/GameDetailsCard';\r\nimport { YearSelector } from '../components/YearSelector';\r\nimport './GamePage.scss';\r\n\r\nexport const GamePage = () => {\r\n\r\n    const [game, setGame] = useState([]);\r\n    const [team, setTeam] = useState(false);\r\n    const {teamName} : {teamName : string} = useParams();\r\n    const {year} : {year : string} = useParams();\r\n\r\n    useEffect(\r\n        () => {\r\n            const getGameForYear = async () => {\r\n                const response = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/team/${teamName}/game?year=${year}`);\r\n                const response2 = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/team/${teamName}`);\r\n                const data = await response.json();\r\n                const data2 = await response2.json();\r\n                setGame(data);\r\n                setTeam(data2);\r\n            };\r\n            getGameForYear();\r\n\r\n        }, [teamName, year] // - Use as empty array as second argument to prevent this from calling the api indefinitely, endlessly\r\n        //looping. Now it will call the api on the first page load only. If you have an argument, then\r\n        //anytime that argument changes value, this code will be ran again. Here we have teamName because\r\n        //when we go to click on a team name we want to see its page, meaning new data needs fetched. So\r\n        //the team name grabbed from the url changes, then the page gets reloaded with data matching new\r\n        //team name. This is called hooks\r\n    );\r\n\r\n    if(!game || !team){\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <div className=\"GamePage\">\r\n            <div className=\"year-selector\">\r\n                <h3>Past Appearances</h3>\r\n                <YearSelector team={team} />\r\n            </div>\r\n            <div>\r\n                <h1>Game Info:</h1>\r\n                {\r\n                    <GameDetailsCard teamName={teamName} game={game}/>\r\n                }\r\n            </div> \r\n        </div>\r\n    );\r\n}\r\n","import { React } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './GameSmallCard.scss';\r\n\r\nexport const GameSmallCard = ({game, teamName}) => {\r\n\r\n    if (!game) return null;\r\n        const otherTeam = game.winner === teamName ? game.loser : game.winner;\r\n        const otherTeamRoute = `/teams/${otherTeam}`;\r\n        const isTeamWon = teamName === game.winner;\r\n\r\n        return (\r\n            <div className={isTeamWon ? 'GameSmallCard won-card' : 'GameSmallCard lost-card'}>\r\n                <span className=\"vs\">vs</span>\r\n                <h1><Link to={otherTeamRoute}> {otherTeam}</Link></h1>\r\n                <p className=\"game-result\">{game.winner} won with a score of {game.winnerPts}</p>\r\n            </div>\r\n        );\r\n}","import { React, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { GameDetailsCard } from '../components/GameDetailsCard';\r\nimport { GameSmallCard } from '../components/GameSmallCard';\r\nimport { PieChart } from 'react-minimal-pie-chart';\r\nimport { Link } from 'react-router-dom';\r\nimport './TeamPage.scss';\r\n\r\n\r\nexport const TeamPage = () => {\r\n\r\n    const [team, setTeam] = useState({gamesPlayed: []});\r\n    const {teamName} : {teamName : string} = useParams();\r\n\r\n    useEffect(\r\n        () => {\r\n            const fetchMatches = async () => {\r\n                const response = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/team/${teamName}`);\r\n                const data = await response.json();\r\n                setTeam(data);\r\n            };\r\n            fetchMatches();\r\n            \r\n        }, [teamName] // - Use as empty array as second argument to prevent this from calling the api indefinitely, endlessly \r\n                      //looping. Now it will call the api on the first page load only. If you have an argument, then\r\n                      //anytime that argument changes value, this code will be ran again. Here we have teamName because\r\n                      //when we go to click on a team name we want to see its page, meaning new data needs fetched. So\r\n                      //the team name grabbed from the url changes, then the page gets reloaded with data matching new\r\n                      //team name. This is called hooks\r\n    );\r\n\r\n    if(!team || !team.teamName){\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    let years = team.gamesPlayed.map(date => date.sbDate.split('-'));\r\n\r\n    return (\r\n        <div className=\"TeamPage\">\r\n            <div className=\"team-name-div\">\r\n                <h1 className=\"team-name\">{team.teamName}</h1>\r\n            </div>\r\n            <div className=\"team-wins-losses-section\">\r\n                Wins/Losses\r\n                <PieChart\r\n                        data={[\r\n                            { title: 'Losses', value: team.totalAppearances - team.totalWins, color: '#a34d5d' },\r\n                            { title: 'Wins', value: team.totalWins, color: '#4da375' }\r\n                        ]}\r\n                        />\r\n            </div>\r\n            <div className=\"game-details-card\">\r\n                <h3>Games</h3>\r\n                <GameDetailsCard teamName={team.teamName} game={team.gamesPlayed[0]}/>\r\n            </div>\r\n            {team.gamesPlayed.slice(1).map(game => <GameSmallCard key={game.id} teamName={team.teamName} game={game}/>)}\r\n            <div>\r\n                <Link className=\"more-link\" to={`/teams/${teamName}/game/${years[0][0]}`}>More ></Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { React } from 'react';\r\nimport './TeamsTile.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const TeamsTile = ({teamName}) => {\r\n    return (\r\n        <div className=\"TeamsTile\">\r\n            <Link to={`/teams/${teamName}`}><h1>{teamName}</h1></Link>\r\n        </div>\r\n    )\r\n}","import { React, useEffect, useState } from 'react';\r\nimport { TeamsTile } from '../components/TeamsTile';\r\nimport './HomePage.scss';\r\n\r\nexport const HomePage = () => {\r\n\r\n    const [teams, setTeams] = useState([]);\r\n\r\n    useEffect(\r\n        () => {\r\n            const getAllTeams = async () => {\r\n                const response = await fetch(`${process.env.REACT_APP_API_ROOT_URL}/teams`);\r\n                const data = await response.json();\r\n                setTeams(data);\r\n            };\r\n            getAllTeams();\r\n\r\n        }, []\r\n    );\r\n\r\n    if(!teams){\r\n        return <h1>Loading...</h1>\r\n    }\r\n\r\n    return (\r\n        <div className=\"HomePage\">\r\n            <div className=\"header-section\">\r\n                <h1 className=\"header-name\">Superbowl History Dashboard</h1>\r\n            </div>\r\n            <div className=\"team-grid\">\r\n                {teams.map(team => <TeamsTile key={team.id} teamName={team.teamName}/>)}\r\n            </div> \r\n        </div>\r\n    );\r\n}","import { React } from 'react';\nimport {HashRouter as Router, Route} from 'react-router-dom';\nimport {Routes} from 'react-router';\nimport './App.scss';\nimport {GamePage} from \"./pages/GamePage\";\nimport {TeamPage} from \"./pages/TeamPage\";\nimport {HomePage} from \"./pages/HomePage\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Routes>\n          <Route path=\"/teams/:teamName\" element={<TeamPage />}></Route>\n          <Route path=\"/teams/:teamName/game/:year\" element={<GamePage />}></Route>\n          <Route path=\"/\" element={<HomePage />}></Route>\n        </Routes>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\ndocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}